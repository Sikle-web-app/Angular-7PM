Step 1.
    create the AWS Account

    https://aws.amazon.com/   (credit card / debit card information)


Step 2.
    create S3 Bucket in AWS

    S3 bucket is nothing but repository


Step 3.
    deploy images to S3 Bucket

    => https://ng7pm.s3.ap-south-1.amazonaws.com/p1.jpg

    => https://ng7pm.s3.ap-south-1.amazonaws.com/p2.jpg

    => https://ng7pm.s3.ap-south-1.amazonaws.com/p3.jpg

    => https://ng7pm.s3.ap-south-1.amazonaws.com/p4.jpg

    => https://ng7pm.s3.ap-south-1.amazonaws.com/p5.jpg

    => https://ng7pm.s3.ap-south-1.amazonaws.com/p6.jpg


Step 4.
    create the database in mongodb

    URL : https://account.mongodb.com/account/login

    database name  : ng7pm

    collection name : products

    user name : admin

    password : admin

    connection URL : mongodb+srv://admin:admin@miniprojectdb.nzphu.mongodb.net/ng7pm?retryWrites=true&w=majority

Step 5.
    create the node server

    => nodejs used to develop the servers

            Http Server

            TCP Server

    => we will develop node server by using JavaScript.

    => node supports the modules

        1) express

            - express used to develop the rest services.

            Ex.
                    GET
                    POST
                    PUT
                    DELETE
        2) cors

            - cors library used to enable the ports communication.

        3) mongodb

            - mongodb used to connect to mongodb database.
        
        4) body-parser

            - body-parser module used to read the data from client application

    a) create the directory (folder)

        Ex.
                backend

    b) switch to backend directory

        > cd backend

    c) download the libraries

            => express

            => cors

            => mongodb

            => body-parser

        > yarn add express cors mongodb body-parser --save

        all the libraries downloads to "node_modules" folder in current path.

    d) implement the node server

        Ex.
            server.js

    e) start the server

        > node server

    f) test the rest api by using "Postman"

        > http://localhost:8080/api/products


16-01-2021
==========

HomeScreen
==========

    => Services  (RxJS)

    => CSS3 & HTML5     (Responsive Web Design)

    => Font Awasome   (Rating)

    => communication Between Components

    => Single Page Applications  (Routing)

    => State Management (NgRx)


step 1.
    create the angular application

    > ng new frontend


step 2.
    create the service to consume following rest api call

    => http://localhost:8080/api/products

    **********************************************
    frontend
           src
             app
               modal
                product.ts
               services
                 products.service.ts
    ***********************************************

    finally "Product" modal is ready

    finally "ProductsService" is ready with "getProducts()" function.


17-03-2021
==========

    => AppComponent is the default Component.

        1) app.component.ts

           app.component.html

           app.component.css

    => we will define global styles in "styles.css" file

    => we will write presentation logic for HomeScreen in "app.component.html"

    => global styles applicable to entire project.

20-03-2021
==========

Single Page Application
-----------------------
    -loading one component to another component without "refreshing" called as Single Page Application.

    -movement of components in Single Page Application called as "Routing".

    -"Routes" is the predefined class, used to implement the Routing.

    -Routes class present in "RouterModule".

    -Routes and RouterModule present in "@angular/router"
     package.


1) create the child screens

    > ng g c screens/products --skip-tests --selector=products -is --flat true

    > ng g c screens/details --skip-tests --selector=details -is --flat true

    > ng g c screens/cart --skip-tests --selector=cart -is --flat true


2) define <router-outlet> directive

    - <router-outlet></router-outlet> is the directive, used to load the one component to another component.

    - <router-outlet></router-outlet> directive behaves like placeholder

3) implement the Routings

    *********************************************
    frontend
           src
             app
               routes
                  app.routes.ts
    *********************************************

        "appRoutes" is the custom variable defines the Routing.

    1)  "/"   => ProductsComponent

    2) "/details"   => DetailsComponent

    3) "/cart"     => CartComponent


4) execute the Routes

    app.module.ts


22-03-2021
==========
State Management
----------------

1) http://localhost:8080/api/products


2) modal


3) actions


4) effects


5) reducer


6) selector


7) subscription and dispatching



step 1.
    download node modules

    1) @ngrx/effects

    2) @ngrx/store

    > cd frontend

    > yarn add @ngrx/effects @ngrx/store --save


step 2.
    create the modal

    ***************************************
    frontend
           src  
             app
               modal 
                  products.modal.ts
    **************************************

        finally "Product" modal is ready


step 3.
    create the actions.

    => hit the server

    => catch the posRes

    => catch the errRes

















    